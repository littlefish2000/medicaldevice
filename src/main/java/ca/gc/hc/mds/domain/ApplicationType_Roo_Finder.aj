// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.ApplicationType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ApplicationType_Roo_Finder {
    
    public static Long ApplicationType.countFindApplicationTypesByApptypeCd(String apptypeCd) {
        if (apptypeCd == null || apptypeCd.length() == 0) throw new IllegalArgumentException("The apptypeCd argument is required");
        EntityManager em = ApplicationType.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ApplicationType AS o WHERE o.apptypeCd = :apptypeCd", Long.class);
        q.setParameter("apptypeCd", apptypeCd);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ApplicationType> ApplicationType.findApplicationTypesByApptypeCd(String apptypeCd) {
        if (apptypeCd == null || apptypeCd.length() == 0) throw new IllegalArgumentException("The apptypeCd argument is required");
        EntityManager em = ApplicationType.entityManager();
        TypedQuery<ApplicationType> q = em.createQuery("SELECT o FROM ApplicationType AS o WHERE o.apptypeCd = :apptypeCd", ApplicationType.class);
        q.setParameter("apptypeCd", apptypeCd);
        return q;
    }
    
    public static TypedQuery<ApplicationType> ApplicationType.findApplicationTypesByApptypeCd(String apptypeCd, String sortFieldName, String sortOrder) {
        if (apptypeCd == null || apptypeCd.length() == 0) throw new IllegalArgumentException("The apptypeCd argument is required");
        EntityManager em = ApplicationType.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ApplicationType AS o WHERE o.apptypeCd = :apptypeCd");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ApplicationType> q = em.createQuery(queryBuilder.toString(), ApplicationType.class);
        q.setParameter("apptypeCd", apptypeCd);
        return q;
    }
    
}
