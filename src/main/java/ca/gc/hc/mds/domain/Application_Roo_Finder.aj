// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Application;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Application_Roo_Finder {
    
    public static Long Application.countFindApplicationsByApplcationNameLike(String applcationName) {
        if (applcationName == null || applcationName.length() == 0) throw new IllegalArgumentException("The applcationName argument is required");
        applcationName = applcationName.replace('*', '%');
        if (applcationName.charAt(0) != '%') {
            applcationName = "%" + applcationName;
        }
        if (applcationName.charAt(applcationName.length() - 1) != '%') {
            applcationName = applcationName + "%";
        }
        EntityManager em = Application.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Application AS o WHERE LOWER(o.applcationName) LIKE LOWER(:applcationName)", Long.class);
        q.setParameter("applcationName", applcationName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Application.countFindApplicationsById(Long id) {
        if (id == null) throw new IllegalArgumentException("The id argument is required");
        EntityManager em = Application.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Application AS o WHERE o.id = :id", Long.class);
        q.setParameter("id", id);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Application> Application.findApplicationsByApplcationNameLike(String applcationName) {
        if (applcationName == null || applcationName.length() == 0) throw new IllegalArgumentException("The applcationName argument is required");
        applcationName = applcationName.replace('*', '%');
        if (applcationName.charAt(0) != '%') {
            applcationName = "%" + applcationName;
        }
        if (applcationName.charAt(applcationName.length() - 1) != '%') {
            applcationName = applcationName + "%";
        }
        EntityManager em = Application.entityManager();
        TypedQuery<Application> q = em.createQuery("SELECT o FROM Application AS o WHERE LOWER(o.applcationName) LIKE LOWER(:applcationName)", Application.class);
        q.setParameter("applcationName", applcationName);
        return q;
    }
    
    public static TypedQuery<Application> Application.findApplicationsByApplcationNameLike(String applcationName, String sortFieldName, String sortOrder) {
        if (applcationName == null || applcationName.length() == 0) throw new IllegalArgumentException("The applcationName argument is required");
        applcationName = applcationName.replace('*', '%');
        if (applcationName.charAt(0) != '%') {
            applcationName = "%" + applcationName;
        }
        if (applcationName.charAt(applcationName.length() - 1) != '%') {
            applcationName = applcationName + "%";
        }
        EntityManager em = Application.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Application AS o WHERE LOWER(o.applcationName) LIKE LOWER(:applcationName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Application> q = em.createQuery(queryBuilder.toString(), Application.class);
        q.setParameter("applcationName", applcationName);
        return q;
    }
    
    public static TypedQuery<Application> Application.findApplicationsById(Long id) {
        if (id == null) throw new IllegalArgumentException("The id argument is required");
        EntityManager em = Application.entityManager();
        TypedQuery<Application> q = em.createQuery("SELECT o FROM Application AS o WHERE o.id = :id", Application.class);
        q.setParameter("id", id);
        return q;
    }
    
    public static TypedQuery<Application> Application.findApplicationsById(Long id, String sortFieldName, String sortOrder) {
        if (id == null) throw new IllegalArgumentException("The id argument is required");
        EntityManager em = Application.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Application AS o WHERE o.id = :id");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Application> q = em.createQuery(queryBuilder.toString(), Application.class);
        q.setParameter("id", id);
        return q;
    }
    
}
