// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.CertificateCompany;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CertificateCompany_Roo_Finder {
    
    public static Long CertificateCompany.countFindCertificateCompanysByEntryDateEquals(Date entryDate) {
        if (entryDate == null) throw new IllegalArgumentException("The entryDate argument is required");
        EntityManager em = CertificateCompany.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CertificateCompany AS o WHERE o.entryDate = :entryDate", Long.class);
        q.setParameter("entryDate", entryDate);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CertificateCompany> CertificateCompany.findCertificateCompanysByEntryDateEquals(Date entryDate) {
        if (entryDate == null) throw new IllegalArgumentException("The entryDate argument is required");
        EntityManager em = CertificateCompany.entityManager();
        TypedQuery<CertificateCompany> q = em.createQuery("SELECT o FROM CertificateCompany AS o WHERE o.entryDate = :entryDate", CertificateCompany.class);
        q.setParameter("entryDate", entryDate);
        return q;
    }
    
    public static TypedQuery<CertificateCompany> CertificateCompany.findCertificateCompanysByEntryDateEquals(Date entryDate, String sortFieldName, String sortOrder) {
        if (entryDate == null) throw new IllegalArgumentException("The entryDate argument is required");
        EntityManager em = CertificateCompany.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CertificateCompany AS o WHERE o.entryDate = :entryDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CertificateCompany> q = em.createQuery(queryBuilder.toString(), CertificateCompany.class);
        q.setParameter("entryDate", entryDate);
        return q;
    }
    
}
