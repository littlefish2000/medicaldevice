// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.CompanyContact;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CompanyContact_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager CompanyContact.entityManager;
    
    public static final List<String> CompanyContact.fieldNames4OrderClauseFilter = java.util.Arrays.asList("companyContactId", "statusDate", "contactName", "contactTitle", "e_MAIL", "company");
    
    public static final EntityManager CompanyContact.entityManager() {
        EntityManager em = new CompanyContact().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CompanyContact.countCompanyContacts() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CompanyContact o", Long.class).getSingleResult();
    }
    
    public static List<CompanyContact> CompanyContact.findAllCompanyContacts() {
        return entityManager().createQuery("SELECT o FROM CompanyContact o", CompanyContact.class).getResultList();
    }
    
    public static List<CompanyContact> CompanyContact.findAllCompanyContacts(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM CompanyContact o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, CompanyContact.class).getResultList();
    }
    
    public static CompanyContact CompanyContact.findCompanyContact(Long companyContactId) {
        if (companyContactId == null) return null;
        return entityManager().find(CompanyContact.class, companyContactId);
    }
    
    public static List<CompanyContact> CompanyContact.findCompanyContactEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CompanyContact o", CompanyContact.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<CompanyContact> CompanyContact.findCompanyContactEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM CompanyContact o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, CompanyContact.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void CompanyContact.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void CompanyContact.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CompanyContact attached = CompanyContact.findCompanyContact(this.companyContactId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CompanyContact.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void CompanyContact.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public CompanyContact CompanyContact.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CompanyContact merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
