// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Correspondence;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Correspondence_Roo_Finder {
    
    public static Long Correspondence.countFindCorrespondencesByApplicationId(Long applicationId) {
        if (applicationId == null) throw new IllegalArgumentException("The applicationId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Correspondence AS o WHERE o.applicationId = :applicationId", Long.class);
        q.setParameter("applicationId", applicationId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Correspondence.countFindCorrespondencesByCertificateIdEquals(String certificateId) {
        if (certificateId == null || certificateId.length() == 0) throw new IllegalArgumentException("The certificateId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Correspondence AS o WHERE o.certificateId = :certificateId", Long.class);
        q.setParameter("certificateId", certificateId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Correspondence.countFindCorrespondencesByCompanyIdEquals(Long companyId) {
        if (companyId == null) throw new IllegalArgumentException("The companyId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Correspondence AS o WHERE o.companyId = :companyId", Long.class);
        q.setParameter("companyId", companyId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Correspondence.countFindCorrespondencesByOrginallicenceIdEquals(Long orginallicenceId) {
        if (orginallicenceId == null) throw new IllegalArgumentException("The orginallicenceId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Correspondence AS o WHERE o.orginallicenceId = :orginallicenceId", Long.class);
        q.setParameter("orginallicenceId", orginallicenceId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Correspondence.countFindCorrespondencesBySeqcorrId(Long seqcorrId) {
        if (seqcorrId == null) throw new IllegalArgumentException("The seqcorrId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Correspondence AS o WHERE o.seqcorrId = :seqcorrId", Long.class);
        q.setParameter("seqcorrId", seqcorrId);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByApplicationId(Long applicationId) {
        if (applicationId == null) throw new IllegalArgumentException("The applicationId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery<Correspondence> q = em.createQuery("SELECT o FROM Correspondence AS o WHERE o.applicationId = :applicationId", Correspondence.class);
        q.setParameter("applicationId", applicationId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByApplicationId(Long applicationId, String sortFieldName, String sortOrder) {
        if (applicationId == null) throw new IllegalArgumentException("The applicationId argument is required");
        EntityManager em = Correspondence.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Correspondence AS o WHERE o.applicationId = :applicationId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Correspondence> q = em.createQuery(queryBuilder.toString(), Correspondence.class);
        q.setParameter("applicationId", applicationId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByCertificateIdEquals(String certificateId) {
        if (certificateId == null || certificateId.length() == 0) throw new IllegalArgumentException("The certificateId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery<Correspondence> q = em.createQuery("SELECT o FROM Correspondence AS o WHERE o.certificateId = :certificateId", Correspondence.class);
        q.setParameter("certificateId", certificateId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByCertificateIdEquals(String certificateId, String sortFieldName, String sortOrder) {
        if (certificateId == null || certificateId.length() == 0) throw new IllegalArgumentException("The certificateId argument is required");
        EntityManager em = Correspondence.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Correspondence AS o WHERE o.certificateId = :certificateId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Correspondence> q = em.createQuery(queryBuilder.toString(), Correspondence.class);
        q.setParameter("certificateId", certificateId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByCompanyIdEquals(Long companyId) {
        if (companyId == null) throw new IllegalArgumentException("The companyId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery<Correspondence> q = em.createQuery("SELECT o FROM Correspondence AS o WHERE o.companyId = :companyId", Correspondence.class);
        q.setParameter("companyId", companyId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByCompanyIdEquals(Long companyId, String sortFieldName, String sortOrder) {
        if (companyId == null) throw new IllegalArgumentException("The companyId argument is required");
        EntityManager em = Correspondence.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Correspondence AS o WHERE o.companyId = :companyId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Correspondence> q = em.createQuery(queryBuilder.toString(), Correspondence.class);
        q.setParameter("companyId", companyId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByOrginallicenceIdEquals(Long orginallicenceId) {
        if (orginallicenceId == null) throw new IllegalArgumentException("The orginallicenceId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery<Correspondence> q = em.createQuery("SELECT o FROM Correspondence AS o WHERE o.orginallicenceId = :orginallicenceId", Correspondence.class);
        q.setParameter("orginallicenceId", orginallicenceId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesByOrginallicenceIdEquals(Long orginallicenceId, String sortFieldName, String sortOrder) {
        if (orginallicenceId == null) throw new IllegalArgumentException("The orginallicenceId argument is required");
        EntityManager em = Correspondence.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Correspondence AS o WHERE o.orginallicenceId = :orginallicenceId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Correspondence> q = em.createQuery(queryBuilder.toString(), Correspondence.class);
        q.setParameter("orginallicenceId", orginallicenceId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesBySeqcorrId(Long seqcorrId) {
        if (seqcorrId == null) throw new IllegalArgumentException("The seqcorrId argument is required");
        EntityManager em = Correspondence.entityManager();
        TypedQuery<Correspondence> q = em.createQuery("SELECT o FROM Correspondence AS o WHERE o.seqcorrId = :seqcorrId", Correspondence.class);
        q.setParameter("seqcorrId", seqcorrId);
        return q;
    }
    
    public static TypedQuery<Correspondence> Correspondence.findCorrespondencesBySeqcorrId(Long seqcorrId, String sortFieldName, String sortOrder) {
        if (seqcorrId == null) throw new IllegalArgumentException("The seqcorrId argument is required");
        EntityManager em = Correspondence.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Correspondence AS o WHERE o.seqcorrId = :seqcorrId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Correspondence> q = em.createQuery(queryBuilder.toString(), Correspondence.class);
        q.setParameter("seqcorrId", seqcorrId);
        return q;
    }
    
}
