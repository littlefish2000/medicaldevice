// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Correspondence;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Correspondence_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Correspondence.entityManager;
    
    public static final List<String> Correspondence.fieldNames4OrderClauseFilter = java.util.Arrays.asList("seqcorrId", "applicationId", "orginallicenceId", "companyId", "certificateId", "incidentId", "corrcompanyId", "addressLine1", "addressLine2", "addressLine3");
    
    public static final EntityManager Correspondence.entityManager() {
        EntityManager em = new Correspondence().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Correspondence.countCorrespondences() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Correspondence o", Long.class).getSingleResult();
    }
    
    public static List<Correspondence> Correspondence.findAllCorrespondences() {
        return entityManager().createQuery("SELECT o FROM Correspondence o", Correspondence.class).getResultList();
    }
    
    public static List<Correspondence> Correspondence.findAllCorrespondences(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Correspondence o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Correspondence.class).getResultList();
    }
    
    public static Correspondence Correspondence.findCorrespondence(Long seqcorrId) {
        if (seqcorrId == null) return null;
        return entityManager().find(Correspondence.class, seqcorrId);
    }
    
    public static List<Correspondence> Correspondence.findCorrespondenceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Correspondence o", Correspondence.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Correspondence> Correspondence.findCorrespondenceEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Correspondence o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Correspondence.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Correspondence.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Correspondence.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Correspondence attached = Correspondence.findCorrespondence(this.seqcorrId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Correspondence.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Correspondence.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Correspondence Correspondence.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Correspondence merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
