// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Division;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Division_Roo_Finder {
    
    public static Long Division.countFindDivisionsByDivisionCd(String divisionCd) {
        if (divisionCd == null || divisionCd.length() == 0) throw new IllegalArgumentException("The divisionCd argument is required");
        EntityManager em = Division.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Division AS o WHERE o.divisionCd = :divisionCd", Long.class);
        q.setParameter("divisionCd", divisionCd);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Division> Division.findDivisionsByDivisionCd(String divisionCd) {
        if (divisionCd == null || divisionCd.length() == 0) throw new IllegalArgumentException("The divisionCd argument is required");
        EntityManager em = Division.entityManager();
        TypedQuery<Division> q = em.createQuery("SELECT o FROM Division AS o WHERE o.divisionCd = :divisionCd", Division.class);
        q.setParameter("divisionCd", divisionCd);
        return q;
    }
    
    public static TypedQuery<Division> Division.findDivisionsByDivisionCd(String divisionCd, String sortFieldName, String sortOrder) {
        if (divisionCd == null || divisionCd.length() == 0) throw new IllegalArgumentException("The divisionCd argument is required");
        EntityManager em = Division.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Division AS o WHERE o.divisionCd = :divisionCd");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Division> q = em.createQuery(queryBuilder.toString(), Division.class);
        q.setParameter("divisionCd", divisionCd);
        return q;
    }
    
}
