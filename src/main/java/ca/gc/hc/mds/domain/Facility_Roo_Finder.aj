// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Facility;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Facility_Roo_Finder {
    
    public static Long Facility.countFindFacilitysByFacilityId(Long facilityId) {
        if (facilityId == null) throw new IllegalArgumentException("The facilityId argument is required");
        EntityManager em = Facility.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Facility AS o WHERE o.facilityId = :facilityId", Long.class);
        q.setParameter("facilityId", facilityId);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Facility> Facility.findFacilitysByFacilityId(Long facilityId) {
        if (facilityId == null) throw new IllegalArgumentException("The facilityId argument is required");
        EntityManager em = Facility.entityManager();
        TypedQuery<Facility> q = em.createQuery("SELECT o FROM Facility AS o WHERE o.facilityId = :facilityId", Facility.class);
        q.setParameter("facilityId", facilityId);
        return q;
    }
    
    public static TypedQuery<Facility> Facility.findFacilitysByFacilityId(Long facilityId, String sortFieldName, String sortOrder) {
        if (facilityId == null) throw new IllegalArgumentException("The facilityId argument is required");
        EntityManager em = Facility.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Facility AS o WHERE o.facilityId = :facilityId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Facility> q = em.createQuery(queryBuilder.toString(), Facility.class);
        q.setParameter("facilityId", facilityId);
        return q;
    }
    
}
