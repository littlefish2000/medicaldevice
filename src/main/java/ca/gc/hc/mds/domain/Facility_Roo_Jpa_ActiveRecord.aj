// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Facility;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Facility_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Facility.entityManager;
    
    public static final List<String> Facility.fieldNames4OrderClauseFilter = java.util.Arrays.asList("facilityId", "facilityName", "facilityCity", "facilityProvince", "facilityPostalCode", "facilityAddress", "facilityAddress2", "facilityfax", "facilityPhone", "facilityEmail");
    
    public static final EntityManager Facility.entityManager() {
        EntityManager em = new Facility().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Facility.countFacilitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Facility o", Long.class).getSingleResult();
    }
    
    public static List<Facility> Facility.findAllFacilitys() {
        return entityManager().createQuery("SELECT o FROM Facility o", Facility.class).getResultList();
    }
    
    public static List<Facility> Facility.findAllFacilitys(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Facility o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Facility.class).getResultList();
    }
    
    public static Facility Facility.findFacility(Long facilityId) {
        if (facilityId == null) return null;
        return entityManager().find(Facility.class, facilityId);
    }
    
    public static List<Facility> Facility.findFacilityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Facility o", Facility.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Facility> Facility.findFacilityEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Facility o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Facility.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Facility.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Facility.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Facility attached = Facility.findFacility(this.facilityId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Facility.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Facility.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Facility Facility.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Facility merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
