// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.Manufacturers;
import ca.gc.hc.mds.domain.ManufacturersPK;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Manufacturers_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Manufacturers.entityManager;
    
    public static final List<String> Manufacturers.fieldNames4OrderClauseFilter = java.util.Arrays.asList("status");
    
    public static final EntityManager Manufacturers.entityManager() {
        EntityManager em = new Manufacturers().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Manufacturers.countManufacturerses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Manufacturers o", Long.class).getSingleResult();
    }
    
    public static List<Manufacturers> Manufacturers.findAllManufacturerses() {
        return entityManager().createQuery("SELECT o FROM Manufacturers o", Manufacturers.class).getResultList();
    }
    
    public static List<Manufacturers> Manufacturers.findAllManufacturerses(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Manufacturers o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Manufacturers.class).getResultList();
    }
    
    public static Manufacturers Manufacturers.findManufacturers(ManufacturersPK id) {
        if (id == null) return null;
        return entityManager().find(Manufacturers.class, id);
    }
    
    public static List<Manufacturers> Manufacturers.findManufacturersEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Manufacturers o", Manufacturers.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Manufacturers> Manufacturers.findManufacturersEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Manufacturers o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Manufacturers.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Manufacturers.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Manufacturers.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Manufacturers attached = Manufacturers.findManufacturers(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Manufacturers.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Manufacturers.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Manufacturers Manufacturers.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Manufacturers merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
