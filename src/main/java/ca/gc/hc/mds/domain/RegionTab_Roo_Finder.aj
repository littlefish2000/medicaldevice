// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.RegionTab;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RegionTab_Roo_Finder {
    
    public static Long RegionTab.countFindRegionTabsByRegionCode(String regionCode) {
        if (regionCode == null || regionCode.length() == 0) throw new IllegalArgumentException("The regionCode argument is required");
        EntityManager em = RegionTab.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RegionTab AS o WHERE o.regionCode = :regionCode", Long.class);
        q.setParameter("regionCode", regionCode);
        return ((Long) q.getSingleResult());
    }
    
    public static Long RegionTab.countFindRegionTabsByRegionName(String regionName) {
        if (regionName == null || regionName.length() == 0) throw new IllegalArgumentException("The regionName argument is required");
        EntityManager em = RegionTab.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RegionTab AS o WHERE o.regionName = :regionName", Long.class);
        q.setParameter("regionName", regionName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<RegionTab> RegionTab.findRegionTabsByRegionCode(String regionCode) {
        if (regionCode == null || regionCode.length() == 0) throw new IllegalArgumentException("The regionCode argument is required");
        EntityManager em = RegionTab.entityManager();
        TypedQuery<RegionTab> q = em.createQuery("SELECT o FROM RegionTab AS o WHERE o.regionCode = :regionCode", RegionTab.class);
        q.setParameter("regionCode", regionCode);
        return q;
    }
    
    public static TypedQuery<RegionTab> RegionTab.findRegionTabsByRegionCode(String regionCode, String sortFieldName, String sortOrder) {
        if (regionCode == null || regionCode.length() == 0) throw new IllegalArgumentException("The regionCode argument is required");
        EntityManager em = RegionTab.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RegionTab AS o WHERE o.regionCode = :regionCode");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RegionTab> q = em.createQuery(queryBuilder.toString(), RegionTab.class);
        q.setParameter("regionCode", regionCode);
        return q;
    }
    
    public static TypedQuery<RegionTab> RegionTab.findRegionTabsByRegionName(String regionName) {
        if (regionName == null || regionName.length() == 0) throw new IllegalArgumentException("The regionName argument is required");
        EntityManager em = RegionTab.entityManager();
        TypedQuery<RegionTab> q = em.createQuery("SELECT o FROM RegionTab AS o WHERE o.regionName = :regionName", RegionTab.class);
        q.setParameter("regionName", regionName);
        return q;
    }
    
    public static TypedQuery<RegionTab> RegionTab.findRegionTabsByRegionName(String regionName, String sortFieldName, String sortOrder) {
        if (regionName == null || regionName.length() == 0) throw new IllegalArgumentException("The regionName argument is required");
        EntityManager em = RegionTab.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RegionTab AS o WHERE o.regionName = :regionName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RegionTab> q = em.createQuery(queryBuilder.toString(), RegionTab.class);
        q.setParameter("regionName", regionName);
        return q;
    }
    
}
