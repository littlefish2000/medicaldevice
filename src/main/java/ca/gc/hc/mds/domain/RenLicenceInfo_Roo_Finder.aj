// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.domain;

import ca.gc.hc.mds.domain.RenLicenceInfo;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RenLicenceInfo_Roo_Finder {
    
    public static Long RenLicenceInfo.countFindRenLicenceInfoesByLicenceNameEquals(String licenceName) {
        if (licenceName == null || licenceName.length() == 0) throw new IllegalArgumentException("The licenceName argument is required");
        EntityManager em = RenLicenceInfo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RenLicenceInfo AS o WHERE o.licenceName = :licenceName", Long.class);
        q.setParameter("licenceName", licenceName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<RenLicenceInfo> RenLicenceInfo.findRenLicenceInfoesByLicenceNameEquals(String licenceName) {
        if (licenceName == null || licenceName.length() == 0) throw new IllegalArgumentException("The licenceName argument is required");
        EntityManager em = RenLicenceInfo.entityManager();
        TypedQuery<RenLicenceInfo> q = em.createQuery("SELECT o FROM RenLicenceInfo AS o WHERE o.licenceName = :licenceName", RenLicenceInfo.class);
        q.setParameter("licenceName", licenceName);
        return q;
    }
    
    public static TypedQuery<RenLicenceInfo> RenLicenceInfo.findRenLicenceInfoesByLicenceNameEquals(String licenceName, String sortFieldName, String sortOrder) {
        if (licenceName == null || licenceName.length() == 0) throw new IllegalArgumentException("The licenceName argument is required");
        EntityManager em = RenLicenceInfo.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RenLicenceInfo AS o WHERE o.licenceName = :licenceName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RenLicenceInfo> q = em.createQuery(queryBuilder.toString(), RenLicenceInfo.class);
        q.setParameter("licenceName", licenceName);
        return q;
    }
    
}
