// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.web;

import ca.gc.hc.mds.domain.Physician;
import ca.gc.hc.mds.web.PhysicianController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PhysicianController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PhysicianController.create(@Valid Physician physician, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, physician);
            return "maintenance/physicians/create";
        }
        uiModel.asMap().clear();
        physician.persist();
        return "redirect:/maintenance/physicians/" + encodeUrlPathSegment(physician.getPhysicianId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PhysicianController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Physician());
        return "maintenance/physicians/create";
    }
    
    @RequestMapping(value = "/{physicianId}", produces = "text/html")
    public String PhysicianController.show(@PathVariable("physicianId") Long physicianId, Model uiModel) {
        uiModel.addAttribute("physician", Physician.findPhysician(physicianId));
        uiModel.addAttribute("itemId", physicianId);
        return "maintenance/physicians/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PhysicianController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("physicians", Physician.findPhysicianEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Physician.countPhysicians() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("physicians", Physician.findAllPhysicians(sortFieldName, sortOrder));
        }
        return "maintenance/physicians/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PhysicianController.update(@Valid Physician physician, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, physician);
            return "maintenance/physicians/update";
        }
        uiModel.asMap().clear();
        physician.merge();
        return "redirect:/maintenance/physicians/" + encodeUrlPathSegment(physician.getPhysicianId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{physicianId}", params = "form", produces = "text/html")
    public String PhysicianController.updateForm(@PathVariable("physicianId") Long physicianId, Model uiModel) {
        populateEditForm(uiModel, Physician.findPhysician(physicianId));
        return "maintenance/physicians/update";
    }
    
    @RequestMapping(value = "/{physicianId}", method = RequestMethod.DELETE, produces = "text/html")
    public String PhysicianController.delete(@PathVariable("physicianId") Long physicianId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Physician physician = Physician.findPhysician(physicianId);
        physician.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/maintenance/physicians";
    }
    
    void PhysicianController.populateEditForm(Model uiModel, Physician physician) {
        uiModel.addAttribute("physician", physician);
    }
    
    String PhysicianController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
