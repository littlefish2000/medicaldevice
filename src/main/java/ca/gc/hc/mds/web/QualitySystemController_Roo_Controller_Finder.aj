// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ca.gc.hc.mds.web;

import ca.gc.hc.mds.domain.Certificate;
import ca.gc.hc.mds.web.QualitySystemController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect QualitySystemController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCertificateIdLike", "form" }, method = RequestMethod.GET)
    public String QualitySystemController.findCertificatesByCertificateIdLikeForm(Model uiModel) {
        return "qualitysystem/certificates/findCertificatesByCertificateIdLike";
    }
    
    @RequestMapping(params = "find=ByCertificateIdLike", method = RequestMethod.GET)
    public String QualitySystemController.findCertificatesByCertificateIdLike(@RequestParam("certificateId") String certificateId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("certificates", Certificate.findCertificatesByCertificateIdLike(certificateId, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Certificate.countFindCertificatesByCertificateIdLike(certificateId) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("certificates", Certificate.findCertificatesByCertificateIdLike(certificateId, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "qualitysystem/certificates/list";
    }
    
    @RequestMapping(params = { "find=ByOrigcertificateIdLike", "form" }, method = RequestMethod.GET)
    public String QualitySystemController.findCertificatesByOrigcertificateIdLikeForm(Model uiModel) {
        return "qualitysystem/certificates/findCertificatesByOrigcertificateIdLike";
    }
    
    @RequestMapping(params = "find=ByOrigcertificateIdLike", method = RequestMethod.GET)
    public String QualitySystemController.findCertificatesByOrigcertificateIdLike(@RequestParam("origcertificateId") String origcertificateId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("certificates", Certificate.findCertificatesByOrigcertificateIdLike(origcertificateId, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Certificate.countFindCertificatesByOrigcertificateIdLike(origcertificateId) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("certificates", Certificate.findCertificatesByOrigcertificateIdLike(origcertificateId, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "qualitysystem/certificates/list";
    }
    
}
